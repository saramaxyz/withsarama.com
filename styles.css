@layer figreset,figoverridable,reset,theme,base,figutils,components,utilities;
@layer figreset{:root{--100dvw:100vw;
--100dvh:100dvh}@supports (width:100dvw){:root{--100dvw:100dvw;
--100dvh:100dvh}}}
@layer figreset {
  /* Modelled after Tailwind's Preflight CSS */
  /* When adding new styles, consider scoping them down to '#container .helperClass' in order to avoid conflicts with CSS styles applied to Code Layers */

  /* Global */

  :root {
    /* Default styling for code nodes. */
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");

  }

  *,
  *:before,
  *:after {
    box-sizing: border-box;
 /* Prevent padding and border from affecting element width */
  }

  /* HTML */

  html {
    -webkit-text-size-adjust: 100%;
 /* Prevent adjustments of font size after orientation changes in iOS. */
    -webkit-tap-highlight-color: transparent;
 /* Disable tap highlights on iOS */
    -webkit-font-smoothing: antialiased;
 /* Improve font rendering on macOS. */

    width: 100%;

  }

  html:has(#responsive-scaler) {
    scrollbar-width: none;

    -ms-overflow-style: none;

  }

  /* Body */

  body {
    margin: 0;
 /* Remove default margin */
    width: 100%;
    background-color: #000;
    color: #fff;
  }

  body:has([data-page-overflowx='hidden']) {
    overflow-x: hidden;

  }

  body:has([data-page-overflowx='auto']) {
    overflow-x: auto;

  }

  /* Container */

  #container {
    width: 100%;

  }

  /* Links */

  a {
    color: inherit;

    text-decoration: none;

  }

  button {
    border: none;

    background: none;

    padding: 0;

  }

  /* Text */

  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p {
    font-size: inherit;

    font-weight: inherit;

  }

  /* Remove the default margins */

  blockquote,
  dl,
  dd,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  hr,
  figure,
  p,
  pre {
    margin: 0;

  }

  ol,
  ul,
  menu {
    list-style: none;

    margin: 0;

    /* the 1.5em is an approximation - the C++ code will measure the width of a tab character */
    /* See LineLayout::addBulletsInLine */
    padding-inline-start: 1.5em;

  }

  /* Keep textContents and textClip in sync with cleanResetText() in preprocess_css.ts */
  #container .textContents {
    /*
  These are set in the text layer, so we don't want to reset them here,
  or else the specific values set in the text layer will be overriden (due to CSS specificity).

  --paragraph-spacing: 0px;

  --list-spacing: 0px;

  */

    /* Text is transparent by default, in case of no fills. */
    color: #ffffff00;

  }

  #container .textContents.hangingList > ul,
  #container .textContents.hangingList > ol {
    margin-left: -1.5em;

  }

  #container .textContents > :not(:last-child) {
    margin-bottom: var(--paragraph-spacing);

  }

  /* Add list spacing if the next element is also a list item */
  #container .textContents > :is(ul, ol):not(:last-child):has(+ :is(ul, ol)) {
    margin-bottom: var(--list-spacing);

  }

  #container .textContents li {
    margin-bottom: var(--list-spacing);

  }

  /* This is incredibly ugly, but we need to make sure that we don't add a margin-bottom to the last
  *  list item if the next element is a div, regardless of indentation. If tomorrow, we decide to support
  *  deeper nesting, we'll need to add more selectors.
  */
    #container .textContents > :is(ol, ul):is(:last-child, :has(+ div)) > li:last-child,
    #container
      .textContents
      > :is(ol, ul):is(:last-child, :has(+ div))
      > :is(ol, ul):last-child
      > li:last-child,
    #container
      .textContents
      > :is(ol, ul):is(:last-child, :has(+ div))
      > :is(ol, ul):last-child
      > :is(ol, ul):last-child
      > li:last-child,
    #container
      .textContents
      > :is(ol, ul):is(:last-child, :has(+ div))
      > :is(ol, ul):last-child
      > :is(ol, ul):last-child
      > :is(ol, ul):last-child
      > li:last-child,
    #container
      .textContents
      > :is(ol, ul):is(:last-child, :has(+ div))
      > :is(ol, ul):last-child
      > :is(ol, ul):last-child
      > :is(ol, ul):last-child
      > :is(ol, ul):last-child
      > li:last-child {
      margin-bottom: 0;

    }

  /**
   * Applies text as a background clip when non-solid fills are present.
   *
   * The !important is used to prevent the selector below (.textClip > *) from overriding this value.
   *
   * Keep in sync with cleanResetText() in preprocess_css.ts.
   **/
    #container .textClip {
      background-clip: text;

      -webkit-background-clip: text;

      -webkit-text-fill-color: transparent !important;

    }

    /** Removes the text fill color for the subtree so it doesn't cascade downward. */
    #container .textClip > * {
      -webkit-text-fill-color: initial;

    }

  /** Removes default border from iframes */
  #container .embed {
    border: none;

  }

    /*
 * ----------------- Marquee styles -----------------
 * These are adapted from https://github.com/justin-chu/react-fast-marquee/blob/master/src/components/Marquee.tsx
 * Copyright (c) 2020 justin-chu
 * MIT License
 */
  #container .marquee-container {
    overflow-x: hidden;

    display: flex;

    flex-direction: row;

    position: relative;

    width: var(--width);

    transform: var(--transform);


    &:hover div {
      animation-play-state: var(--pause-on-hover);

    }

    &:active div {
      animation-play-state: var(--pause-on-click);

    }
  }

  #container .marquee {
    flex: 0 0 auto;

    min-width: var(--min-width);

    display: flex;

    flex-direction: row;

    align-items: center;

    animation: scroll var(--duration) linear var(--delay) var(--iteration-count);

    animation-delay: var(--delay);

    animation-direction: var(--direction);

    animation-timing-function: var(--timing-function);

  }

  @keyframes scroll {
    0% {
      transform: translateX(0%);

    }
    100% {
      transform: translateX(-100%);

    }
  }

  #container .marquee-initial-child-container {
    flex: 0 0 auto;

    display: flex;

    min-width: auto;

    flex-direction: row;

    align-items: center;

  }

  #container .marquee-child {
    transform: var(--transform);

  }

  /**
   * Styles for direct children of the code behavior wrapper.
   * These elements are defined in the code behavior, so we can't access them directly.
   */
  .code-behavior-wrapper > * {
    width: 100%;

    height: 100%;

  }
}

@layer figutils {
  /*
    List discs are not native, so we get more rounded circles and closer positioning to designs
  */
  /* .css-ul-before is used in design-to-react */
  .textContents ul > li:before {
    content: '\2022';

    margin-left: -1.5em;

    display: inline-block;

    text-align: center;

    width: 1.5em;

    -webkit-background-clip: var(--list-marker-background-clip);

    -webkit-text-fill-color: var(--list-marker-text-fill-color);

    background-clip: var(--list-marker-background-clip);

    background-image: var(--list-marker-background-image);

    color: var(--list-marker-color);

    font-size: var(--list-marker-font-size);

    line-height: var(--list-marker-line-height);

    mix-blend-mode: var(--list-marker-mix-blend-mode);

    vertical-align: var(--list-marker-vertical-align);

  }

  /* .css-ol-marker is used in design-to-react */
  .textContents ol > li::marker {
    color: var(--list-marker-color);

    font-size: var(--list-marker-font-size);

    line-height: var(--list-marker-line-height);

    vertical-align: var(--list-marker-vertical-align);

  }

  .textContents .adjustLetterSpacing:after {
    content: '';

    margin-left: calc(var(--letter-spacing) * -1);

  }
}

/* Custom styles for animation */
.background-video {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  z-index: -1;
  opacity: 0.3;
  transition: opacity 0.5s ease;
}

/* Button hover effects */
.css-4tsjdn:hover {
  transform: translateY(-2px);
  transition: transform 0.3s ease;
  cursor: pointer;
}

.css-pygw6r:hover, .css-pygw3b:hover {
  transform: scale(1.05);
  transition: transform 0.3s ease;
  cursor: pointer;
}

/* Text animations */
.textContents p {
  transition: color 0.3s ease, transform 0.3s ease;
}

/* Custom animations */
.animate__fadeIn {
  animation-duration: 1.5s;
}

.animate__delay-1s { animation-delay: 0.2s; }
.animate__delay-2s { animation-delay: 0.4s; }
.animate__delay-3s { animation-delay: 0.6s; }
.animate__delay-4s { animation-delay: 0.8s; }
.animate__delay-5s { animation-delay: 1s; }
.animate__delay-6s { animation-delay: 1.2s; }
.animate__delay-7s { animation-delay: 1.4s; }
.animate__delay-8s { animation-delay: 1.6s; }
.animate__delay-9s { animation-delay: 1.8s; }
.animate__delay-10s { animation-delay: 2s; }
.animate__delay-11s { animation-delay: 2.2s; }
.animate__delay-12s { animation-delay: 2.4s; }
.animate__delay-13s { animation-delay: 2.6s; }
.animate__delay-14s { animation-delay: 2.8s; }

/* Make text visible by default */
.textContents {
  color: #fff !important;
}

/* Add subtle text shadow for better readability */
.css-nltibn, .css-19u6f {
  text-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .animate__fadeIn {
    animation-duration: 1s;
  }
  
  /* Speed up animations on mobile */
  .animate__delay-1s { animation-delay: 0.1s; }
  .animate__delay-2s { animation-delay: 0.2s; }
  .animate__delay-3s { animation-delay: 0.3s; }
  .animate__delay-4s { animation-delay: 0.4s; }
  .animate__delay-5s { animation-delay: 0.5s; }
  .animate__delay-6s { animation-delay: 0.6s; }
  .animate__delay-7s { animation-delay: 0.7s; }
  .animate__delay-8s { animation-delay: 0.8s; }
  .animate__delay-9s { animation-delay: 0.9s; }
  .animate__delay-10s { animation-delay: 1s; }
  .animate__delay-11s { animation-delay: 1.1s; }
  .animate__delay-12s { animation-delay: 1.2s; }
  .animate__delay-13s { animation-delay: 1.3s; }
  .animate__delay-14s { animation-delay: 1.4s; }
}